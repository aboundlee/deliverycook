{"ast":null,"code":"import $ from \"jquery\";\n\nconst ModalAnimation = () => {\n  var $html = $(document.documentElement),\n      $site = $('.site'),\n      $body = $('body');\n  var hasCSSClipPaths = !!window.chrome && !/constructor/i.test(window.HTMLElement);\n\n  if (hasCSSClipPaths) {\n    $html.addClass('cssclippaths');\n  }\n\n  $(window).scrollTop(0);\n  var $modal = null,\n      $overlay = $('.overlay'),\n      $wrapper = $('.modal-wrapper'),\n      $ripple = $('.overlay__ripple'),\n      $button = $('.close-button');\n\n  function lockScroll(pointer) {\n    //   var st = $(window).scrollTop();\n    var w2,\n        w1 = $html[0].clientWidth;\n    $body.addClass('js-lock-scroll' + (pointer ? ' js-lock-pointer' : '')); //   $site.css('margin-top', -st);  \n\n    w2 = $html[0].clientWidth; // replace scrollbar with padding\n\n    if (w2 > w1) {\n      $body.css('padding-right', w2 - w1);\n    }\n  }\n\n  function unlockScroll() {\n    //   var st = Math.abs(parseInt($site.css('margin-top'), 10));\n    //   $site.css('margin-top', 0);\n    $body.css('padding-right', '').removeClass('js-lock-scroll js-lock-pointer'); //   $('html,body').scrollTop(st);\n  } // return distance between two points\n\n\n  function dist(p1, p2) {\n    var xs = p2[0] - p1[0];\n    var ys = p2[1] - p1[1];\n    return Math.sqrt(xs * xs + ys * ys);\n  } // return max width of a circle needed to cover a rectangle\n\n\n  function fillViewport(p1, width, height) {\n    // calc radius from centre to each corner\n    var nw = dist(p1, [0, 0]),\n        ne = dist(p1, [width, 0]),\n        se = dist(p1, [width, height]),\n        sw = dist(p1, [0, height]); // return diameter required\n\n    return 2 * Math.max(nw, ne, se, sw);\n  }\n\n  var openOverlay = function (btn, id) {\n    $modal = $('.modal[data-modal=\"' + id + '\"]');\n    lockScroll(true);\n    requestAnimationFrame(function () {\n      $overlay.addClass('js-open').attr('data-modal', id);\n      var bounds = btn.getBoundingClientRect();\n      $wrapper.addClass('show-modal-content'); // get viewport dimensions\n\n      var vw = $(window).width(),\n          vh = $(window).height(); // get position of the button centre\n\n      var p1 = [bounds.left + bounds.width / 2, bounds.top + bounds.height / 2]; // calc max diameter required to fill viewport\n\n      var diameter = fillViewport(p1, vw, vh); // pixels per second (animation speed)\n\n      var pps = 6000; // scale minimum duration somewhat proportionally \n\n      var duration = 400 + Math.round(diameter / pps * 1000) * 0.5;\n      $ripple.css({\n        'transition-duration': duration + 'ms',\n        'width': diameter,\n        'height': diameter,\n        'left': p1[0],\n        'top': p1[1]\n      });\n\n      if (hasCSSClipPaths && id === 'test') {\n        $modal.css('transition-duration', '300ms, ' + duration + 'ms');\n        $modal.css('-webkit-clip-path', 'circle(' + diameter / 2 + 'px at 50% 50%)');\n      }\n\n      requestAnimationFrame(function () {\n        $overlay.addClass('js-animate-in');\n        $ripple.one('transitionend', function () {\n          $overlay.addClass('js-animate-done');\n          $body.removeClass('js-lock-pointer');\n          $ripple.removeAttr('style');\n        });\n      });\n    });\n  };\n\n  var closeOverlay = function () {\n    $body.addClass('js-lock-pointer');\n    requestAnimationFrame(function () {\n      $modal.removeAttr('style');\n      $overlay.removeClass('js-animate-in');\n    });\n    $ripple.one('transitionend', function () {\n      $wrapper.scrollTop(0);\n      $overlay.removeClass('js-open js-animate-done').removeAttr('data-modal');\n      $wrapper.removeClass('show-modal-content');\n      unlockScroll();\n    });\n  };\n\n  $('[data-modal][data-action=\"open\"]').on('click', function () {\n    var btn = this;\n    requestAnimationFrame(function () {\n      openOverlay(btn, $(btn).data('modal'));\n    });\n  }); // $overlay.on('click', function() {\n  // requestAnimationFrame(function() {\n  //     closeOverlay();\n  // });\n  // });\n\n  $wrapper.on('click', function (e) {\n    var $target = $(e.target);\n    if ($target.hasClass('modal')) return;\n\n    if ($target.parents('.modal').length && $target.data('action') !== 'close') {\n      if (!$target.parents('[data-action=\"close\"]').length) {\n        return;\n      }\n    }\n  });\n  $button.on('click', function (e) {\n    e.preventDefault();\n    console.log(\"CLICKED!!!\");\n    requestAnimationFrame(function () {\n      closeOverlay();\n    });\n  });\n\n  (function () {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  })();\n};\n\nexport default ModalAnimation;","map":null,"metadata":{},"sourceType":"module"}